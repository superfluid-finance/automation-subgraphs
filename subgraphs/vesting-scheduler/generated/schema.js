"use strict";
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskLoader = exports.Task = exports.TokenSenderReceiverCursor = exports.VestingSchedule = exports.VestingScheduleUpdatedEvent = exports.VestingScheduleDeletedEvent = exports.VestingScheduleCreatedEvent = exports.VestingEndFailedEvent = exports.VestingEndExecutedEvent = exports.VestingCliffAndFlowExecutedEvent = void 0;
const graph_ts_1 = require("@graphprotocol/graph-ts");
class VestingCliffAndFlowExecutedEvent extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save VestingCliffAndFlowExecutedEvent entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type VestingCliffAndFlowExecutedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("VestingCliffAndFlowExecutedEvent", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("VestingCliffAndFlowExecutedEvent", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("VestingCliffAndFlowExecutedEvent", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get blockNumber() {
        let value = this.get("blockNumber");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set blockNumber(value) {
        this.set("blockNumber", graph_ts_1.Value.fromBigInt(value));
    }
    get logIndex() {
        let value = this.get("logIndex");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set logIndex(value) {
        this.set("logIndex", graph_ts_1.Value.fromBigInt(value));
    }
    get order() {
        let value = this.get("order");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set order(value) {
        this.set("order", graph_ts_1.Value.fromBigInt(value));
    }
    get name() {
        let value = this.get("name");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set name(value) {
        this.set("name", graph_ts_1.Value.fromString(value));
    }
    get addresses() {
        let value = this.get("addresses");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytesArray();
        }
    }
    set addresses(value) {
        this.set("addresses", graph_ts_1.Value.fromBytesArray(value));
    }
    get timestamp() {
        let value = this.get("timestamp");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set timestamp(value) {
        this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
    }
    get transactionHash() {
        let value = this.get("transactionHash");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set transactionHash(value) {
        this.set("transactionHash", graph_ts_1.Value.fromBytes(value));
    }
    get gasPrice() {
        let value = this.get("gasPrice");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set gasPrice(value) {
        this.set("gasPrice", graph_ts_1.Value.fromBigInt(value));
    }
    get superToken() {
        let value = this.get("superToken");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set superToken(value) {
        this.set("superToken", graph_ts_1.Value.fromBytes(value));
    }
    get sender() {
        let value = this.get("sender");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set sender(value) {
        this.set("sender", graph_ts_1.Value.fromBytes(value));
    }
    get receiver() {
        let value = this.get("receiver");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set receiver(value) {
        this.set("receiver", graph_ts_1.Value.fromBytes(value));
    }
    get cliffAndFlowDate() {
        let value = this.get("cliffAndFlowDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set cliffAndFlowDate(value) {
        this.set("cliffAndFlowDate", graph_ts_1.Value.fromBigInt(value));
    }
    get flowRate() {
        let value = this.get("flowRate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set flowRate(value) {
        this.set("flowRate", graph_ts_1.Value.fromBigInt(value));
    }
    get cliffAmount() {
        let value = this.get("cliffAmount");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set cliffAmount(value) {
        this.set("cliffAmount", graph_ts_1.Value.fromBigInt(value));
    }
    get flowDelayCompensation() {
        let value = this.get("flowDelayCompensation");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set flowDelayCompensation(value) {
        this.set("flowDelayCompensation", graph_ts_1.Value.fromBigInt(value));
    }
}
exports.VestingCliffAndFlowExecutedEvent = VestingCliffAndFlowExecutedEvent;
class VestingEndExecutedEvent extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save VestingEndExecutedEvent entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type VestingEndExecutedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("VestingEndExecutedEvent", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("VestingEndExecutedEvent", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("VestingEndExecutedEvent", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get blockNumber() {
        let value = this.get("blockNumber");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set blockNumber(value) {
        this.set("blockNumber", graph_ts_1.Value.fromBigInt(value));
    }
    get logIndex() {
        let value = this.get("logIndex");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set logIndex(value) {
        this.set("logIndex", graph_ts_1.Value.fromBigInt(value));
    }
    get order() {
        let value = this.get("order");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set order(value) {
        this.set("order", graph_ts_1.Value.fromBigInt(value));
    }
    get name() {
        let value = this.get("name");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set name(value) {
        this.set("name", graph_ts_1.Value.fromString(value));
    }
    get addresses() {
        let value = this.get("addresses");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytesArray();
        }
    }
    set addresses(value) {
        this.set("addresses", graph_ts_1.Value.fromBytesArray(value));
    }
    get timestamp() {
        let value = this.get("timestamp");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set timestamp(value) {
        this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
    }
    get transactionHash() {
        let value = this.get("transactionHash");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set transactionHash(value) {
        this.set("transactionHash", graph_ts_1.Value.fromBytes(value));
    }
    get gasPrice() {
        let value = this.get("gasPrice");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set gasPrice(value) {
        this.set("gasPrice", graph_ts_1.Value.fromBigInt(value));
    }
    get superToken() {
        let value = this.get("superToken");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set superToken(value) {
        this.set("superToken", graph_ts_1.Value.fromBytes(value));
    }
    get sender() {
        let value = this.get("sender");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set sender(value) {
        this.set("sender", graph_ts_1.Value.fromBytes(value));
    }
    get receiver() {
        let value = this.get("receiver");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set receiver(value) {
        this.set("receiver", graph_ts_1.Value.fromBytes(value));
    }
    get endDate() {
        let value = this.get("endDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set endDate(value) {
        this.set("endDate", graph_ts_1.Value.fromBigInt(value));
    }
    get earlyEndCompensation() {
        let value = this.get("earlyEndCompensation");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set earlyEndCompensation(value) {
        this.set("earlyEndCompensation", graph_ts_1.Value.fromBigInt(value));
    }
    get didCompensationFail() {
        let value = this.get("didCompensationFail");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return false;
        }
        else {
            return value.toBoolean();
        }
    }
    set didCompensationFail(value) {
        this.set("didCompensationFail", graph_ts_1.Value.fromBoolean(value));
    }
}
exports.VestingEndExecutedEvent = VestingEndExecutedEvent;
class VestingEndFailedEvent extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save VestingEndFailedEvent entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type VestingEndFailedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("VestingEndFailedEvent", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("VestingEndFailedEvent", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("VestingEndFailedEvent", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get blockNumber() {
        let value = this.get("blockNumber");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set blockNumber(value) {
        this.set("blockNumber", graph_ts_1.Value.fromBigInt(value));
    }
    get logIndex() {
        let value = this.get("logIndex");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set logIndex(value) {
        this.set("logIndex", graph_ts_1.Value.fromBigInt(value));
    }
    get order() {
        let value = this.get("order");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set order(value) {
        this.set("order", graph_ts_1.Value.fromBigInt(value));
    }
    get name() {
        let value = this.get("name");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set name(value) {
        this.set("name", graph_ts_1.Value.fromString(value));
    }
    get addresses() {
        let value = this.get("addresses");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytesArray();
        }
    }
    set addresses(value) {
        this.set("addresses", graph_ts_1.Value.fromBytesArray(value));
    }
    get timestamp() {
        let value = this.get("timestamp");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set timestamp(value) {
        this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
    }
    get transactionHash() {
        let value = this.get("transactionHash");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set transactionHash(value) {
        this.set("transactionHash", graph_ts_1.Value.fromBytes(value));
    }
    get gasPrice() {
        let value = this.get("gasPrice");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set gasPrice(value) {
        this.set("gasPrice", graph_ts_1.Value.fromBigInt(value));
    }
    get superToken() {
        let value = this.get("superToken");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set superToken(value) {
        this.set("superToken", graph_ts_1.Value.fromBytes(value));
    }
    get sender() {
        let value = this.get("sender");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set sender(value) {
        this.set("sender", graph_ts_1.Value.fromBytes(value));
    }
    get receiver() {
        let value = this.get("receiver");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set receiver(value) {
        this.set("receiver", graph_ts_1.Value.fromBytes(value));
    }
    get endDate() {
        let value = this.get("endDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set endDate(value) {
        this.set("endDate", graph_ts_1.Value.fromBigInt(value));
    }
}
exports.VestingEndFailedEvent = VestingEndFailedEvent;
class VestingScheduleCreatedEvent extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save VestingScheduleCreatedEvent entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type VestingScheduleCreatedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("VestingScheduleCreatedEvent", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("VestingScheduleCreatedEvent", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("VestingScheduleCreatedEvent", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get blockNumber() {
        let value = this.get("blockNumber");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set blockNumber(value) {
        this.set("blockNumber", graph_ts_1.Value.fromBigInt(value));
    }
    get logIndex() {
        let value = this.get("logIndex");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set logIndex(value) {
        this.set("logIndex", graph_ts_1.Value.fromBigInt(value));
    }
    get order() {
        let value = this.get("order");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set order(value) {
        this.set("order", graph_ts_1.Value.fromBigInt(value));
    }
    get name() {
        let value = this.get("name");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set name(value) {
        this.set("name", graph_ts_1.Value.fromString(value));
    }
    get addresses() {
        let value = this.get("addresses");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytesArray();
        }
    }
    set addresses(value) {
        this.set("addresses", graph_ts_1.Value.fromBytesArray(value));
    }
    get timestamp() {
        let value = this.get("timestamp");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set timestamp(value) {
        this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
    }
    get transactionHash() {
        let value = this.get("transactionHash");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set transactionHash(value) {
        this.set("transactionHash", graph_ts_1.Value.fromBytes(value));
    }
    get gasPrice() {
        let value = this.get("gasPrice");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set gasPrice(value) {
        this.set("gasPrice", graph_ts_1.Value.fromBigInt(value));
    }
    get superToken() {
        let value = this.get("superToken");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set superToken(value) {
        this.set("superToken", graph_ts_1.Value.fromBytes(value));
    }
    get sender() {
        let value = this.get("sender");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set sender(value) {
        this.set("sender", graph_ts_1.Value.fromBytes(value));
    }
    get receiver() {
        let value = this.get("receiver");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set receiver(value) {
        this.set("receiver", graph_ts_1.Value.fromBytes(value));
    }
    get startDate() {
        let value = this.get("startDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set startDate(value) {
        this.set("startDate", graph_ts_1.Value.fromBigInt(value));
    }
    get claimValidityDate() {
        let value = this.get("claimValidityDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set claimValidityDate(value) {
        this.set("claimValidityDate", graph_ts_1.Value.fromBigInt(value));
    }
    get cliffDate() {
        let value = this.get("cliffDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set cliffDate(value) {
        this.set("cliffDate", graph_ts_1.Value.fromBigInt(value));
    }
    get flowRate() {
        let value = this.get("flowRate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set flowRate(value) {
        this.set("flowRate", graph_ts_1.Value.fromBigInt(value));
    }
    get endDate() {
        let value = this.get("endDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set endDate(value) {
        this.set("endDate", graph_ts_1.Value.fromBigInt(value));
    }
    get cliffAmount() {
        let value = this.get("cliffAmount");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set cliffAmount(value) {
        this.set("cliffAmount", graph_ts_1.Value.fromBigInt(value));
    }
}
exports.VestingScheduleCreatedEvent = VestingScheduleCreatedEvent;
class VestingScheduleDeletedEvent extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save VestingScheduleDeletedEvent entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type VestingScheduleDeletedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("VestingScheduleDeletedEvent", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("VestingScheduleDeletedEvent", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("VestingScheduleDeletedEvent", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get blockNumber() {
        let value = this.get("blockNumber");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set blockNumber(value) {
        this.set("blockNumber", graph_ts_1.Value.fromBigInt(value));
    }
    get logIndex() {
        let value = this.get("logIndex");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set logIndex(value) {
        this.set("logIndex", graph_ts_1.Value.fromBigInt(value));
    }
    get order() {
        let value = this.get("order");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set order(value) {
        this.set("order", graph_ts_1.Value.fromBigInt(value));
    }
    get name() {
        let value = this.get("name");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set name(value) {
        this.set("name", graph_ts_1.Value.fromString(value));
    }
    get addresses() {
        let value = this.get("addresses");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytesArray();
        }
    }
    set addresses(value) {
        this.set("addresses", graph_ts_1.Value.fromBytesArray(value));
    }
    get timestamp() {
        let value = this.get("timestamp");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set timestamp(value) {
        this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
    }
    get transactionHash() {
        let value = this.get("transactionHash");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set transactionHash(value) {
        this.set("transactionHash", graph_ts_1.Value.fromBytes(value));
    }
    get gasPrice() {
        let value = this.get("gasPrice");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set gasPrice(value) {
        this.set("gasPrice", graph_ts_1.Value.fromBigInt(value));
    }
    get superToken() {
        let value = this.get("superToken");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set superToken(value) {
        this.set("superToken", graph_ts_1.Value.fromBytes(value));
    }
    get sender() {
        let value = this.get("sender");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set sender(value) {
        this.set("sender", graph_ts_1.Value.fromBytes(value));
    }
    get receiver() {
        let value = this.get("receiver");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set receiver(value) {
        this.set("receiver", graph_ts_1.Value.fromBytes(value));
    }
}
exports.VestingScheduleDeletedEvent = VestingScheduleDeletedEvent;
class VestingScheduleUpdatedEvent extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save VestingScheduleUpdatedEvent entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type VestingScheduleUpdatedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("VestingScheduleUpdatedEvent", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("VestingScheduleUpdatedEvent", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("VestingScheduleUpdatedEvent", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get blockNumber() {
        let value = this.get("blockNumber");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set blockNumber(value) {
        this.set("blockNumber", graph_ts_1.Value.fromBigInt(value));
    }
    get logIndex() {
        let value = this.get("logIndex");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set logIndex(value) {
        this.set("logIndex", graph_ts_1.Value.fromBigInt(value));
    }
    get order() {
        let value = this.get("order");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set order(value) {
        this.set("order", graph_ts_1.Value.fromBigInt(value));
    }
    get name() {
        let value = this.get("name");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set name(value) {
        this.set("name", graph_ts_1.Value.fromString(value));
    }
    get addresses() {
        let value = this.get("addresses");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytesArray();
        }
    }
    set addresses(value) {
        this.set("addresses", graph_ts_1.Value.fromBytesArray(value));
    }
    get timestamp() {
        let value = this.get("timestamp");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set timestamp(value) {
        this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
    }
    get transactionHash() {
        let value = this.get("transactionHash");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set transactionHash(value) {
        this.set("transactionHash", graph_ts_1.Value.fromBytes(value));
    }
    get gasPrice() {
        let value = this.get("gasPrice");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set gasPrice(value) {
        this.set("gasPrice", graph_ts_1.Value.fromBigInt(value));
    }
    get superToken() {
        let value = this.get("superToken");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set superToken(value) {
        this.set("superToken", graph_ts_1.Value.fromBytes(value));
    }
    get sender() {
        let value = this.get("sender");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set sender(value) {
        this.set("sender", graph_ts_1.Value.fromBytes(value));
    }
    get receiver() {
        let value = this.get("receiver");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set receiver(value) {
        this.set("receiver", graph_ts_1.Value.fromBytes(value));
    }
    get oldEndDate() {
        let value = this.get("oldEndDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set oldEndDate(value) {
        this.set("oldEndDate", graph_ts_1.Value.fromBigInt(value));
    }
    get endDate() {
        let value = this.get("endDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set endDate(value) {
        this.set("endDate", graph_ts_1.Value.fromBigInt(value));
    }
}
exports.VestingScheduleUpdatedEvent = VestingScheduleUpdatedEvent;
class VestingSchedule extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save VestingSchedule entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type VestingSchedule must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("VestingSchedule", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("VestingSchedule", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("VestingSchedule", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get contractVersion() {
        let value = this.get("contractVersion");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set contractVersion(value) {
        this.set("contractVersion", graph_ts_1.Value.fromString(value));
    }
    get createdAt() {
        let value = this.get("createdAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set createdAt(value) {
        this.set("createdAt", graph_ts_1.Value.fromBigInt(value));
    }
    get superToken() {
        let value = this.get("superToken");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set superToken(value) {
        this.set("superToken", graph_ts_1.Value.fromBytes(value));
    }
    get sender() {
        let value = this.get("sender");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set sender(value) {
        this.set("sender", graph_ts_1.Value.fromBytes(value));
    }
    get receiver() {
        let value = this.get("receiver");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set receiver(value) {
        this.set("receiver", graph_ts_1.Value.fromBytes(value));
    }
    get startDate() {
        let value = this.get("startDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set startDate(value) {
        this.set("startDate", graph_ts_1.Value.fromBigInt(value));
    }
    get endDate() {
        let value = this.get("endDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set endDate(value) {
        this.set("endDate", graph_ts_1.Value.fromBigInt(value));
    }
    get claimValidityDate() {
        let value = this.get("claimValidityDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set claimValidityDate(value) {
        this.set("claimValidityDate", graph_ts_1.Value.fromBigInt(value));
    }
    get cliffDate() {
        let value = this.get("cliffDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toBigInt();
        }
    }
    set cliffDate(value) {
        if (!value) {
            this.unset("cliffDate");
        }
        else {
            this.set("cliffDate", graph_ts_1.Value.fromBigInt(value));
        }
    }
    get cliffAndFlowDate() {
        let value = this.get("cliffAndFlowDate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set cliffAndFlowDate(value) {
        this.set("cliffAndFlowDate", graph_ts_1.Value.fromBigInt(value));
    }
    get cliffAmount() {
        let value = this.get("cliffAmount");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set cliffAmount(value) {
        this.set("cliffAmount", graph_ts_1.Value.fromBigInt(value));
    }
    get flowRate() {
        let value = this.get("flowRate");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set flowRate(value) {
        this.set("flowRate", graph_ts_1.Value.fromBigInt(value));
    }
    get didEarlyEndCompensationFail() {
        let value = this.get("didEarlyEndCompensationFail");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return false;
        }
        else {
            return value.toBoolean();
        }
    }
    set didEarlyEndCompensationFail(value) {
        this.set("didEarlyEndCompensationFail", graph_ts_1.Value.fromBoolean(value));
    }
    get earlyEndCompensation() {
        let value = this.get("earlyEndCompensation");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toBigInt();
        }
    }
    set earlyEndCompensation(value) {
        if (!value) {
            this.unset("earlyEndCompensation");
        }
        else {
            this.set("earlyEndCompensation", graph_ts_1.Value.fromBigInt(value));
        }
    }
    get cliffAndFlowExpirationAt() {
        let value = this.get("cliffAndFlowExpirationAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set cliffAndFlowExpirationAt(value) {
        this.set("cliffAndFlowExpirationAt", graph_ts_1.Value.fromBigInt(value));
    }
    get endDateValidAt() {
        let value = this.get("endDateValidAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set endDateValidAt(value) {
        this.set("endDateValidAt", graph_ts_1.Value.fromBigInt(value));
    }
    get deletedAt() {
        let value = this.get("deletedAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toBigInt();
        }
    }
    set deletedAt(value) {
        if (!value) {
            this.unset("deletedAt");
        }
        else {
            this.set("deletedAt", graph_ts_1.Value.fromBigInt(value));
        }
    }
    get failedAt() {
        let value = this.get("failedAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toBigInt();
        }
    }
    set failedAt(value) {
        if (!value) {
            this.unset("failedAt");
        }
        else {
            this.set("failedAt", graph_ts_1.Value.fromBigInt(value));
        }
    }
    get cliffAndFlowExecutedAt() {
        let value = this.get("cliffAndFlowExecutedAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toBigInt();
        }
    }
    set cliffAndFlowExecutedAt(value) {
        if (!value) {
            this.unset("cliffAndFlowExecutedAt");
        }
        else {
            this.set("cliffAndFlowExecutedAt", graph_ts_1.Value.fromBigInt(value));
        }
    }
    get endExecutedAt() {
        let value = this.get("endExecutedAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toBigInt();
        }
    }
    set endExecutedAt(value) {
        if (!value) {
            this.unset("endExecutedAt");
        }
        else {
            this.set("endExecutedAt", graph_ts_1.Value.fromBigInt(value));
        }
    }
    get tasks() {
        return new TaskLoader("VestingSchedule", this.get("id").toString(), "tasks");
    }
    get events() {
        let value = this.get("events");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toStringArray();
        }
    }
    set events(value) {
        this.set("events", graph_ts_1.Value.fromStringArray(value));
    }
}
exports.VestingSchedule = VestingSchedule;
class TokenSenderReceiverCursor extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save TokenSenderReceiverCursor entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type TokenSenderReceiverCursor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("TokenSenderReceiverCursor", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("TokenSenderReceiverCursor", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("TokenSenderReceiverCursor", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get currentVestingSchedule() {
        let value = this.get("currentVestingSchedule");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toString();
        }
    }
    set currentVestingSchedule(value) {
        if (!value) {
            this.unset("currentVestingSchedule");
        }
        else {
            this.set("currentVestingSchedule", graph_ts_1.Value.fromString(value));
        }
    }
    get currentCliffAndFlowTask() {
        let value = this.get("currentCliffAndFlowTask");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toString();
        }
    }
    set currentCliffAndFlowTask(value) {
        if (!value) {
            this.unset("currentCliffAndFlowTask");
        }
        else {
            this.set("currentCliffAndFlowTask", graph_ts_1.Value.fromString(value));
        }
    }
    get currentEndVestingTask() {
        let value = this.get("currentEndVestingTask");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toString();
        }
    }
    set currentEndVestingTask(value) {
        if (!value) {
            this.unset("currentEndVestingTask");
        }
        else {
            this.set("currentEndVestingTask", graph_ts_1.Value.fromString(value));
        }
    }
}
exports.TokenSenderReceiverCursor = TokenSenderReceiverCursor;
class Task extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save Task entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type Task must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("Task", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("Task", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("Task", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get type() {
        let value = this.get("type");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set type(value) {
        this.set("type", graph_ts_1.Value.fromString(value));
    }
    get executedAt() {
        let value = this.get("executedAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toBigInt();
        }
    }
    set executedAt(value) {
        if (!value) {
            this.unset("executedAt");
        }
        else {
            this.set("executedAt", graph_ts_1.Value.fromBigInt(value));
        }
    }
    get executionAt() {
        let value = this.get("executionAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set executionAt(value) {
        this.set("executionAt", graph_ts_1.Value.fromBigInt(value));
    }
    get expirationAt() {
        let value = this.get("expirationAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set expirationAt(value) {
        this.set("expirationAt", graph_ts_1.Value.fromBigInt(value));
    }
    get cancelledAt() {
        let value = this.get("cancelledAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toBigInt();
        }
    }
    set cancelledAt(value) {
        if (!value) {
            this.unset("cancelledAt");
        }
        else {
            this.set("cancelledAt", graph_ts_1.Value.fromBigInt(value));
        }
    }
    get failedAt() {
        let value = this.get("failedAt");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            return null;
        }
        else {
            return value.toBigInt();
        }
    }
    set failedAt(value) {
        if (!value) {
            this.unset("failedAt");
        }
        else {
            this.set("failedAt", graph_ts_1.Value.fromBigInt(value));
        }
    }
    get vestingSchedule() {
        let value = this.get("vestingSchedule");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set vestingSchedule(value) {
        this.set("vestingSchedule", graph_ts_1.Value.fromString(value));
    }
}
exports.Task = Task;
class TaskLoader extends graph_ts_1.Entity {
    constructor(entity, id, field) {
        super();
        this._entity = entity;
        this._id = id;
        this._field = field;
    }
    load() {
        let value = graph_ts_1.store.loadRelated(this._entity, this._id, this._field);
        return changetype(value);
    }
}
exports.TaskLoader = TaskLoader;
