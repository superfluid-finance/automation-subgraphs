// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class VestingCliffAndFlowExecuted extends ethereum.Event {
  get params(): VestingCliffAndFlowExecuted__Params {
    return new VestingCliffAndFlowExecuted__Params(this);
  }
}

export class VestingCliffAndFlowExecuted__Params {
  _event: VestingCliffAndFlowExecuted;

  constructor(event: VestingCliffAndFlowExecuted) {
    this._event = event;
  }

  get superToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get cliffAndFlowDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get flowRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get cliffAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get flowDelayCompensation(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class VestingEndExecuted extends ethereum.Event {
  get params(): VestingEndExecuted__Params {
    return new VestingEndExecuted__Params(this);
  }
}

export class VestingEndExecuted__Params {
  _event: VestingEndExecuted;

  constructor(event: VestingEndExecuted) {
    this._event = event;
  }

  get superToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get endDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get earlyEndCompensation(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get didCompensationFail(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class VestingEndFailed extends ethereum.Event {
  get params(): VestingEndFailed__Params {
    return new VestingEndFailed__Params(this);
  }
}

export class VestingEndFailed__Params {
  _event: VestingEndFailed;

  constructor(event: VestingEndFailed) {
    this._event = event;
  }

  get superToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get endDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VestingScheduleCreated extends ethereum.Event {
  get params(): VestingScheduleCreated__Params {
    return new VestingScheduleCreated__Params(this);
  }
}

export class VestingScheduleCreated__Params {
  _event: VestingScheduleCreated;

  constructor(event: VestingScheduleCreated) {
    this._event = event;
  }

  get superToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get startDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get claimValidityDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get cliffDate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get flowRate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get cliffAmount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get remainderAmount(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class VestingScheduleDeleted extends ethereum.Event {
  get params(): VestingScheduleDeleted__Params {
    return new VestingScheduleDeleted__Params(this);
  }
}

export class VestingScheduleDeleted__Params {
  _event: VestingScheduleDeleted;

  constructor(event: VestingScheduleDeleted) {
    this._event = event;
  }

  get superToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class VestingScheduleUpdated extends ethereum.Event {
  get params(): VestingScheduleUpdated__Params {
    return new VestingScheduleUpdated__Params(this);
  }
}

export class VestingScheduleUpdated__Params {
  _event: VestingScheduleUpdated;

  constructor(event: VestingScheduleUpdated) {
    this._event = event;
  }

  get superToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get oldEndDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class VestingScheduler__cfaV1Result {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getHost(): Address {
    return this.value0;
  }

  getCfa(): Address {
    return this.value1;
  }
}

export class VestingScheduler__getVestingScheduleResultValue0Struct extends ethereum.Tuple {
  get cliffAndFlowDate(): BigInt {
    return this[0].toBigInt();
  }

  get endDate(): BigInt {
    return this[1].toBigInt();
  }

  get claimValidityDate(): BigInt {
    return this[2].toBigInt();
  }

  get flowRate(): BigInt {
    return this[3].toBigInt();
  }

  get cliffAmount(): BigInt {
    return this[4].toBigInt();
  }

  get remainderAmount(): BigInt {
    return this[5].toBigInt();
  }
}

export class VestingScheduler__vestingSchedulesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getCliffAndFlowDate(): BigInt {
    return this.value0;
  }

  getEndDate(): BigInt {
    return this.value1;
  }

  getClaimValidityDate(): BigInt {
    return this.value2;
  }

  getFlowRate(): BigInt {
    return this.value3;
  }

  getCliffAmount(): BigInt {
    return this.value4;
  }

  getRemainderAmount(): BigInt {
    return this.value5;
  }
}

export class VestingScheduler extends ethereum.SmartContract {
  static bind(address: Address): VestingScheduler {
    return new VestingScheduler("VestingScheduler", address);
  }

  END_DATE_VALID_BEFORE(): BigInt {
    let result = super.call(
      "END_DATE_VALID_BEFORE",
      "END_DATE_VALID_BEFORE():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_END_DATE_VALID_BEFORE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "END_DATE_VALID_BEFORE",
      "END_DATE_VALID_BEFORE():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_VESTING_DURATION(): BigInt {
    let result = super.call(
      "MIN_VESTING_DURATION",
      "MIN_VESTING_DURATION():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_VESTING_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_VESTING_DURATION",
      "MIN_VESTING_DURATION():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  START_DATE_VALID_AFTER(): BigInt {
    let result = super.call(
      "START_DATE_VALID_AFTER",
      "START_DATE_VALID_AFTER():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_START_DATE_VALID_AFTER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "START_DATE_VALID_AFTER",
      "START_DATE_VALID_AFTER():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  afterAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    param5: Bytes,
  ): Bytes {
    let result = super.call(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(param5),
      ],
    );

    return result[0].toBytes();
  }

  try_afterAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    param5: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(param5),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    param5: Bytes,
  ): Bytes {
    let result = super.call(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(param5),
      ],
    );

    return result[0].toBytes();
  }

  try_afterAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    param5: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(param5),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    param5: Bytes,
  ): Bytes {
    let result = super.call(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(param5),
      ],
    );

    return result[0].toBytes();
  }

  try_afterAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    param5: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(param5),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  cfaV1(): VestingScheduler__cfaV1Result {
    let result = super.call("cfaV1", "cfaV1():(address,address)", []);

    return new VestingScheduler__cfaV1Result(
      result[0].toAddress(),
      result[1].toAddress(),
    );
  }

  try_cfaV1(): ethereum.CallResult<VestingScheduler__cfaV1Result> {
    let result = super.tryCall("cfaV1", "cfaV1():(address,address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VestingScheduler__cfaV1Result(
        value[0].toAddress(),
        value[1].toAddress(),
      ),
    );
  }

  createAndExecuteVestingScheduleFromAmountAndDuration(
    superToken: Address,
    receiver: Address,
    totalAmount: BigInt,
    totalDuration: BigInt,
    ctx: Bytes,
  ): Bytes {
    let result = super.call(
      "createAndExecuteVestingScheduleFromAmountAndDuration",
      "createAndExecuteVestingScheduleFromAmountAndDuration(address,address,uint256,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(totalAmount),
        ethereum.Value.fromUnsignedBigInt(totalDuration),
        ethereum.Value.fromBytes(ctx),
      ],
    );

    return result[0].toBytes();
  }

  try_createAndExecuteVestingScheduleFromAmountAndDuration(
    superToken: Address,
    receiver: Address,
    totalAmount: BigInt,
    totalDuration: BigInt,
    ctx: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createAndExecuteVestingScheduleFromAmountAndDuration",
      "createAndExecuteVestingScheduleFromAmountAndDuration(address,address,uint256,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(totalAmount),
        ethereum.Value.fromUnsignedBigInt(totalDuration),
        ethereum.Value.fromBytes(ctx),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  createClaimableVestingSchedule(
    superToken: Address,
    receiver: Address,
    startDate: BigInt,
    claimValidityDate: BigInt,
    cliffDate: BigInt,
    flowRate: BigInt,
    cliffAmount: BigInt,
    endDate: BigInt,
    ctx: Bytes,
  ): Bytes {
    let result = super.call(
      "createClaimableVestingSchedule",
      "createClaimableVestingSchedule(address,address,uint32,uint32,uint32,int96,uint256,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(startDate),
        ethereum.Value.fromUnsignedBigInt(claimValidityDate),
        ethereum.Value.fromUnsignedBigInt(cliffDate),
        ethereum.Value.fromSignedBigInt(flowRate),
        ethereum.Value.fromUnsignedBigInt(cliffAmount),
        ethereum.Value.fromUnsignedBigInt(endDate),
        ethereum.Value.fromBytes(ctx),
      ],
    );

    return result[0].toBytes();
  }

  try_createClaimableVestingSchedule(
    superToken: Address,
    receiver: Address,
    startDate: BigInt,
    claimValidityDate: BigInt,
    cliffDate: BigInt,
    flowRate: BigInt,
    cliffAmount: BigInt,
    endDate: BigInt,
    ctx: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createClaimableVestingSchedule",
      "createClaimableVestingSchedule(address,address,uint32,uint32,uint32,int96,uint256,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(startDate),
        ethereum.Value.fromUnsignedBigInt(claimValidityDate),
        ethereum.Value.fromUnsignedBigInt(cliffDate),
        ethereum.Value.fromSignedBigInt(flowRate),
        ethereum.Value.fromUnsignedBigInt(cliffAmount),
        ethereum.Value.fromUnsignedBigInt(endDate),
        ethereum.Value.fromBytes(ctx),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  createClaimableVestingScheduleFromAmountAndDuration(
    superToken: Address,
    receiver: Address,
    totalAmount: BigInt,
    totalDuration: BigInt,
    claimValidityDate: BigInt,
    cliffPeriod: BigInt,
    startDate: BigInt,
    ctx: Bytes,
  ): Bytes {
    let result = super.call(
      "createClaimableVestingScheduleFromAmountAndDuration",
      "createClaimableVestingScheduleFromAmountAndDuration(address,address,uint256,uint32,uint32,uint32,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(totalAmount),
        ethereum.Value.fromUnsignedBigInt(totalDuration),
        ethereum.Value.fromUnsignedBigInt(claimValidityDate),
        ethereum.Value.fromUnsignedBigInt(cliffPeriod),
        ethereum.Value.fromUnsignedBigInt(startDate),
        ethereum.Value.fromBytes(ctx),
      ],
    );

    return result[0].toBytes();
  }

  try_createClaimableVestingScheduleFromAmountAndDuration(
    superToken: Address,
    receiver: Address,
    totalAmount: BigInt,
    totalDuration: BigInt,
    claimValidityDate: BigInt,
    cliffPeriod: BigInt,
    startDate: BigInt,
    ctx: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createClaimableVestingScheduleFromAmountAndDuration",
      "createClaimableVestingScheduleFromAmountAndDuration(address,address,uint256,uint32,uint32,uint32,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(totalAmount),
        ethereum.Value.fromUnsignedBigInt(totalDuration),
        ethereum.Value.fromUnsignedBigInt(claimValidityDate),
        ethereum.Value.fromUnsignedBigInt(cliffPeriod),
        ethereum.Value.fromUnsignedBigInt(startDate),
        ethereum.Value.fromBytes(ctx),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  createVestingSchedule(
    superToken: Address,
    receiver: Address,
    startDate: BigInt,
    cliffDate: BigInt,
    flowRate: BigInt,
    cliffAmount: BigInt,
    endDate: BigInt,
    ctx: Bytes,
  ): Bytes {
    let result = super.call(
      "createVestingSchedule",
      "createVestingSchedule(address,address,uint32,uint32,int96,uint256,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(startDate),
        ethereum.Value.fromUnsignedBigInt(cliffDate),
        ethereum.Value.fromSignedBigInt(flowRate),
        ethereum.Value.fromUnsignedBigInt(cliffAmount),
        ethereum.Value.fromUnsignedBigInt(endDate),
        ethereum.Value.fromBytes(ctx),
      ],
    );

    return result[0].toBytes();
  }

  try_createVestingSchedule(
    superToken: Address,
    receiver: Address,
    startDate: BigInt,
    cliffDate: BigInt,
    flowRate: BigInt,
    cliffAmount: BigInt,
    endDate: BigInt,
    ctx: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createVestingSchedule",
      "createVestingSchedule(address,address,uint32,uint32,int96,uint256,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(startDate),
        ethereum.Value.fromUnsignedBigInt(cliffDate),
        ethereum.Value.fromSignedBigInt(flowRate),
        ethereum.Value.fromUnsignedBigInt(cliffAmount),
        ethereum.Value.fromUnsignedBigInt(endDate),
        ethereum.Value.fromBytes(ctx),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  createVestingScheduleFromAmountAndDuration(
    superToken: Address,
    receiver: Address,
    totalAmount: BigInt,
    totalDuration: BigInt,
    cliffPeriod: BigInt,
    startDate: BigInt,
    ctx: Bytes,
  ): Bytes {
    let result = super.call(
      "createVestingScheduleFromAmountAndDuration",
      "createVestingScheduleFromAmountAndDuration(address,address,uint256,uint32,uint32,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(totalAmount),
        ethereum.Value.fromUnsignedBigInt(totalDuration),
        ethereum.Value.fromUnsignedBigInt(cliffPeriod),
        ethereum.Value.fromUnsignedBigInt(startDate),
        ethereum.Value.fromBytes(ctx),
      ],
    );

    return result[0].toBytes();
  }

  try_createVestingScheduleFromAmountAndDuration(
    superToken: Address,
    receiver: Address,
    totalAmount: BigInt,
    totalDuration: BigInt,
    cliffPeriod: BigInt,
    startDate: BigInt,
    ctx: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createVestingScheduleFromAmountAndDuration",
      "createVestingScheduleFromAmountAndDuration(address,address,uint256,uint32,uint32,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(totalAmount),
        ethereum.Value.fromUnsignedBigInt(totalDuration),
        ethereum.Value.fromUnsignedBigInt(cliffPeriod),
        ethereum.Value.fromUnsignedBigInt(startDate),
        ethereum.Value.fromBytes(ctx),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  deleteVestingSchedule(
    superToken: Address,
    receiver: Address,
    ctx: Bytes,
  ): Bytes {
    let result = super.call(
      "deleteVestingSchedule",
      "deleteVestingSchedule(address,address,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromBytes(ctx),
      ],
    );

    return result[0].toBytes();
  }

  try_deleteVestingSchedule(
    superToken: Address,
    receiver: Address,
    ctx: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "deleteVestingSchedule",
      "deleteVestingSchedule(address,address,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromBytes(ctx),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  executeCliffAndFlow(
    superToken: Address,
    sender: Address,
    receiver: Address,
  ): boolean {
    let result = super.call(
      "executeCliffAndFlow",
      "executeCliffAndFlow(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return result[0].toBoolean();
  }

  try_executeCliffAndFlow(
    superToken: Address,
    sender: Address,
    receiver: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "executeCliffAndFlow",
      "executeCliffAndFlow(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  executeEndVesting(
    superToken: Address,
    sender: Address,
    receiver: Address,
  ): boolean {
    let result = super.call(
      "executeEndVesting",
      "executeEndVesting(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return result[0].toBoolean();
  }

  try_executeEndVesting(
    superToken: Address,
    sender: Address,
    receiver: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "executeEndVesting",
      "executeEndVesting(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getVestingSchedule(
    supertoken: Address,
    sender: Address,
    receiver: Address,
  ): VestingScheduler__getVestingScheduleResultValue0Struct {
    let result = super.call(
      "getVestingSchedule",
      "getVestingSchedule(address,address,address):((uint32,uint32,uint32,int96,uint256,uint256))",
      [
        ethereum.Value.fromAddress(supertoken),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return changetype<VestingScheduler__getVestingScheduleResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getVestingSchedule(
    supertoken: Address,
    sender: Address,
    receiver: Address,
  ): ethereum.CallResult<VestingScheduler__getVestingScheduleResultValue0Struct> {
    let result = super.tryCall(
      "getVestingSchedule",
      "getVestingSchedule(address,address,address):((uint32,uint32,uint32,int96,uint256,uint256))",
      [
        ethereum.Value.fromAddress(supertoken),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<VestingScheduler__getVestingScheduleResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  updateVestingSchedule(
    superToken: Address,
    receiver: Address,
    endDate: BigInt,
    ctx: Bytes,
  ): Bytes {
    let result = super.call(
      "updateVestingSchedule",
      "updateVestingSchedule(address,address,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(endDate),
        ethereum.Value.fromBytes(ctx),
      ],
    );

    return result[0].toBytes();
  }

  try_updateVestingSchedule(
    superToken: Address,
    receiver: Address,
    endDate: BigInt,
    ctx: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "updateVestingSchedule",
      "updateVestingSchedule(address,address,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(endDate),
        ethereum.Value.fromBytes(ctx),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  vestingSchedules(param0: Bytes): VestingScheduler__vestingSchedulesResult {
    let result = super.call(
      "vestingSchedules",
      "vestingSchedules(bytes32):(uint32,uint32,uint32,int96,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new VestingScheduler__vestingSchedulesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
    );
  }

  try_vestingSchedules(
    param0: Bytes,
  ): ethereum.CallResult<VestingScheduler__vestingSchedulesResult> {
    let result = super.tryCall(
      "vestingSchedules",
      "vestingSchedules(bytes32):(uint32,uint32,uint32,int96,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VestingScheduler__vestingSchedulesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get host(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AfterAgreementCreatedCall extends ethereum.Call {
  get inputs(): AfterAgreementCreatedCall__Inputs {
    return new AfterAgreementCreatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementCreatedCall__Outputs {
    return new AfterAgreementCreatedCall__Outputs(this);
  }
}

export class AfterAgreementCreatedCall__Inputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get value5(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementCreatedCall__Outputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall extends ethereum.Call {
  get inputs(): AfterAgreementTerminatedCall__Inputs {
    return new AfterAgreementTerminatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementTerminatedCall__Outputs {
    return new AfterAgreementTerminatedCall__Outputs(this);
  }
}

export class AfterAgreementTerminatedCall__Inputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get value5(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall__Outputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall extends ethereum.Call {
  get inputs(): AfterAgreementUpdatedCall__Inputs {
    return new AfterAgreementUpdatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementUpdatedCall__Outputs {
    return new AfterAgreementUpdatedCall__Outputs(this);
  }
}

export class AfterAgreementUpdatedCall__Inputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get value5(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall__Outputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CreateAndExecuteVestingScheduleFromAmountAndDurationCall extends ethereum.Call {
  get inputs(): CreateAndExecuteVestingScheduleFromAmountAndDurationCall__Inputs {
    return new CreateAndExecuteVestingScheduleFromAmountAndDurationCall__Inputs(
      this,
    );
  }

  get outputs(): CreateAndExecuteVestingScheduleFromAmountAndDurationCall__Outputs {
    return new CreateAndExecuteVestingScheduleFromAmountAndDurationCall__Outputs(
      this,
    );
  }
}

export class CreateAndExecuteVestingScheduleFromAmountAndDurationCall__Inputs {
  _call: CreateAndExecuteVestingScheduleFromAmountAndDurationCall;

  constructor(call: CreateAndExecuteVestingScheduleFromAmountAndDurationCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get ctx(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CreateAndExecuteVestingScheduleFromAmountAndDurationCall__Outputs {
  _call: CreateAndExecuteVestingScheduleFromAmountAndDurationCall;

  constructor(call: CreateAndExecuteVestingScheduleFromAmountAndDurationCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CreateAndExecuteVestingScheduleFromAmountAndDuration1Call extends ethereum.Call {
  get inputs(): CreateAndExecuteVestingScheduleFromAmountAndDuration1Call__Inputs {
    return new CreateAndExecuteVestingScheduleFromAmountAndDuration1Call__Inputs(
      this,
    );
  }

  get outputs(): CreateAndExecuteVestingScheduleFromAmountAndDuration1Call__Outputs {
    return new CreateAndExecuteVestingScheduleFromAmountAndDuration1Call__Outputs(
      this,
    );
  }
}

export class CreateAndExecuteVestingScheduleFromAmountAndDuration1Call__Inputs {
  _call: CreateAndExecuteVestingScheduleFromAmountAndDuration1Call;

  constructor(call: CreateAndExecuteVestingScheduleFromAmountAndDuration1Call) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateAndExecuteVestingScheduleFromAmountAndDuration1Call__Outputs {
  _call: CreateAndExecuteVestingScheduleFromAmountAndDuration1Call;

  constructor(call: CreateAndExecuteVestingScheduleFromAmountAndDuration1Call) {
    this._call = call;
  }
}

export class CreateClaimableVestingScheduleCall extends ethereum.Call {
  get inputs(): CreateClaimableVestingScheduleCall__Inputs {
    return new CreateClaimableVestingScheduleCall__Inputs(this);
  }

  get outputs(): CreateClaimableVestingScheduleCall__Outputs {
    return new CreateClaimableVestingScheduleCall__Outputs(this);
  }
}

export class CreateClaimableVestingScheduleCall__Inputs {
  _call: CreateClaimableVestingScheduleCall;

  constructor(call: CreateClaimableVestingScheduleCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get startDate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get claimValidityDate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get cliffDate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get flowRate(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get cliffAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get ctx(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class CreateClaimableVestingScheduleCall__Outputs {
  _call: CreateClaimableVestingScheduleCall;

  constructor(call: CreateClaimableVestingScheduleCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CreateClaimableVestingSchedule1Call extends ethereum.Call {
  get inputs(): CreateClaimableVestingSchedule1Call__Inputs {
    return new CreateClaimableVestingSchedule1Call__Inputs(this);
  }

  get outputs(): CreateClaimableVestingSchedule1Call__Outputs {
    return new CreateClaimableVestingSchedule1Call__Outputs(this);
  }
}

export class CreateClaimableVestingSchedule1Call__Inputs {
  _call: CreateClaimableVestingSchedule1Call;

  constructor(call: CreateClaimableVestingSchedule1Call) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get startDate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get claimValidityDate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get cliffDate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get flowRate(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get cliffAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class CreateClaimableVestingSchedule1Call__Outputs {
  _call: CreateClaimableVestingSchedule1Call;

  constructor(call: CreateClaimableVestingSchedule1Call) {
    this._call = call;
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDurationCall extends ethereum.Call {
  get inputs(): CreateClaimableVestingScheduleFromAmountAndDurationCall__Inputs {
    return new CreateClaimableVestingScheduleFromAmountAndDurationCall__Inputs(
      this,
    );
  }

  get outputs(): CreateClaimableVestingScheduleFromAmountAndDurationCall__Outputs {
    return new CreateClaimableVestingScheduleFromAmountAndDurationCall__Outputs(
      this,
    );
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDurationCall__Inputs {
  _call: CreateClaimableVestingScheduleFromAmountAndDurationCall;

  constructor(call: CreateClaimableVestingScheduleFromAmountAndDurationCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get claimValidityDate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get cliffPeriod(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDurationCall__Outputs {
  _call: CreateClaimableVestingScheduleFromAmountAndDurationCall;

  constructor(call: CreateClaimableVestingScheduleFromAmountAndDurationCall) {
    this._call = call;
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDuration1Call extends ethereum.Call {
  get inputs(): CreateClaimableVestingScheduleFromAmountAndDuration1Call__Inputs {
    return new CreateClaimableVestingScheduleFromAmountAndDuration1Call__Inputs(
      this,
    );
  }

  get outputs(): CreateClaimableVestingScheduleFromAmountAndDuration1Call__Outputs {
    return new CreateClaimableVestingScheduleFromAmountAndDuration1Call__Outputs(
      this,
    );
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDuration1Call__Inputs {
  _call: CreateClaimableVestingScheduleFromAmountAndDuration1Call;

  constructor(call: CreateClaimableVestingScheduleFromAmountAndDuration1Call) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get claimValidityDate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get cliffPeriod(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get startDate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDuration1Call__Outputs {
  _call: CreateClaimableVestingScheduleFromAmountAndDuration1Call;

  constructor(call: CreateClaimableVestingScheduleFromAmountAndDuration1Call) {
    this._call = call;
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDuration2Call extends ethereum.Call {
  get inputs(): CreateClaimableVestingScheduleFromAmountAndDuration2Call__Inputs {
    return new CreateClaimableVestingScheduleFromAmountAndDuration2Call__Inputs(
      this,
    );
  }

  get outputs(): CreateClaimableVestingScheduleFromAmountAndDuration2Call__Outputs {
    return new CreateClaimableVestingScheduleFromAmountAndDuration2Call__Outputs(
      this,
    );
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDuration2Call__Inputs {
  _call: CreateClaimableVestingScheduleFromAmountAndDuration2Call;

  constructor(call: CreateClaimableVestingScheduleFromAmountAndDuration2Call) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get claimValidityDate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDuration2Call__Outputs {
  _call: CreateClaimableVestingScheduleFromAmountAndDuration2Call;

  constructor(call: CreateClaimableVestingScheduleFromAmountAndDuration2Call) {
    this._call = call;
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDuration3Call extends ethereum.Call {
  get inputs(): CreateClaimableVestingScheduleFromAmountAndDuration3Call__Inputs {
    return new CreateClaimableVestingScheduleFromAmountAndDuration3Call__Inputs(
      this,
    );
  }

  get outputs(): CreateClaimableVestingScheduleFromAmountAndDuration3Call__Outputs {
    return new CreateClaimableVestingScheduleFromAmountAndDuration3Call__Outputs(
      this,
    );
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDuration3Call__Inputs {
  _call: CreateClaimableVestingScheduleFromAmountAndDuration3Call;

  constructor(call: CreateClaimableVestingScheduleFromAmountAndDuration3Call) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get claimValidityDate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get cliffPeriod(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get startDate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get ctx(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class CreateClaimableVestingScheduleFromAmountAndDuration3Call__Outputs {
  _call: CreateClaimableVestingScheduleFromAmountAndDuration3Call;

  constructor(call: CreateClaimableVestingScheduleFromAmountAndDuration3Call) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CreateVestingScheduleCall extends ethereum.Call {
  get inputs(): CreateVestingScheduleCall__Inputs {
    return new CreateVestingScheduleCall__Inputs(this);
  }

  get outputs(): CreateVestingScheduleCall__Outputs {
    return new CreateVestingScheduleCall__Outputs(this);
  }
}

export class CreateVestingScheduleCall__Inputs {
  _call: CreateVestingScheduleCall;

  constructor(call: CreateVestingScheduleCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get startDate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get cliffDate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get flowRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get cliffAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get ctx(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class CreateVestingScheduleCall__Outputs {
  _call: CreateVestingScheduleCall;

  constructor(call: CreateVestingScheduleCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CreateVestingSchedule1Call extends ethereum.Call {
  get inputs(): CreateVestingSchedule1Call__Inputs {
    return new CreateVestingSchedule1Call__Inputs(this);
  }

  get outputs(): CreateVestingSchedule1Call__Outputs {
    return new CreateVestingSchedule1Call__Outputs(this);
  }
}

export class CreateVestingSchedule1Call__Inputs {
  _call: CreateVestingSchedule1Call;

  constructor(call: CreateVestingSchedule1Call) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get startDate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get cliffDate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get flowRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get cliffAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateVestingSchedule1Call__Outputs {
  _call: CreateVestingSchedule1Call;

  constructor(call: CreateVestingSchedule1Call) {
    this._call = call;
  }
}

export class CreateVestingScheduleFromAmountAndDurationCall extends ethereum.Call {
  get inputs(): CreateVestingScheduleFromAmountAndDurationCall__Inputs {
    return new CreateVestingScheduleFromAmountAndDurationCall__Inputs(this);
  }

  get outputs(): CreateVestingScheduleFromAmountAndDurationCall__Outputs {
    return new CreateVestingScheduleFromAmountAndDurationCall__Outputs(this);
  }
}

export class CreateVestingScheduleFromAmountAndDurationCall__Inputs {
  _call: CreateVestingScheduleFromAmountAndDurationCall;

  constructor(call: CreateVestingScheduleFromAmountAndDurationCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateVestingScheduleFromAmountAndDurationCall__Outputs {
  _call: CreateVestingScheduleFromAmountAndDurationCall;

  constructor(call: CreateVestingScheduleFromAmountAndDurationCall) {
    this._call = call;
  }
}

export class CreateVestingScheduleFromAmountAndDuration1Call extends ethereum.Call {
  get inputs(): CreateVestingScheduleFromAmountAndDuration1Call__Inputs {
    return new CreateVestingScheduleFromAmountAndDuration1Call__Inputs(this);
  }

  get outputs(): CreateVestingScheduleFromAmountAndDuration1Call__Outputs {
    return new CreateVestingScheduleFromAmountAndDuration1Call__Outputs(this);
  }
}

export class CreateVestingScheduleFromAmountAndDuration1Call__Inputs {
  _call: CreateVestingScheduleFromAmountAndDuration1Call;

  constructor(call: CreateVestingScheduleFromAmountAndDuration1Call) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get cliffPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get startDate(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get ctx(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class CreateVestingScheduleFromAmountAndDuration1Call__Outputs {
  _call: CreateVestingScheduleFromAmountAndDuration1Call;

  constructor(call: CreateVestingScheduleFromAmountAndDuration1Call) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CreateVestingScheduleFromAmountAndDuration2Call extends ethereum.Call {
  get inputs(): CreateVestingScheduleFromAmountAndDuration2Call__Inputs {
    return new CreateVestingScheduleFromAmountAndDuration2Call__Inputs(this);
  }

  get outputs(): CreateVestingScheduleFromAmountAndDuration2Call__Outputs {
    return new CreateVestingScheduleFromAmountAndDuration2Call__Outputs(this);
  }
}

export class CreateVestingScheduleFromAmountAndDuration2Call__Inputs {
  _call: CreateVestingScheduleFromAmountAndDuration2Call;

  constructor(call: CreateVestingScheduleFromAmountAndDuration2Call) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get cliffPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get startDate(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateVestingScheduleFromAmountAndDuration2Call__Outputs {
  _call: CreateVestingScheduleFromAmountAndDuration2Call;

  constructor(call: CreateVestingScheduleFromAmountAndDuration2Call) {
    this._call = call;
  }
}

export class CreateVestingScheduleFromAmountAndDuration3Call extends ethereum.Call {
  get inputs(): CreateVestingScheduleFromAmountAndDuration3Call__Inputs {
    return new CreateVestingScheduleFromAmountAndDuration3Call__Inputs(this);
  }

  get outputs(): CreateVestingScheduleFromAmountAndDuration3Call__Outputs {
    return new CreateVestingScheduleFromAmountAndDuration3Call__Outputs(this);
  }
}

export class CreateVestingScheduleFromAmountAndDuration3Call__Inputs {
  _call: CreateVestingScheduleFromAmountAndDuration3Call;

  constructor(call: CreateVestingScheduleFromAmountAndDuration3Call) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get cliffPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateVestingScheduleFromAmountAndDuration3Call__Outputs {
  _call: CreateVestingScheduleFromAmountAndDuration3Call;

  constructor(call: CreateVestingScheduleFromAmountAndDuration3Call) {
    this._call = call;
  }
}

export class DeleteVestingScheduleCall extends ethereum.Call {
  get inputs(): DeleteVestingScheduleCall__Inputs {
    return new DeleteVestingScheduleCall__Inputs(this);
  }

  get outputs(): DeleteVestingScheduleCall__Outputs {
    return new DeleteVestingScheduleCall__Outputs(this);
  }
}

export class DeleteVestingScheduleCall__Inputs {
  _call: DeleteVestingScheduleCall;

  constructor(call: DeleteVestingScheduleCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ctx(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DeleteVestingScheduleCall__Outputs {
  _call: DeleteVestingScheduleCall;

  constructor(call: DeleteVestingScheduleCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExecuteCliffAndFlowCall extends ethereum.Call {
  get inputs(): ExecuteCliffAndFlowCall__Inputs {
    return new ExecuteCliffAndFlowCall__Inputs(this);
  }

  get outputs(): ExecuteCliffAndFlowCall__Outputs {
    return new ExecuteCliffAndFlowCall__Outputs(this);
  }
}

export class ExecuteCliffAndFlowCall__Inputs {
  _call: ExecuteCliffAndFlowCall;

  constructor(call: ExecuteCliffAndFlowCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ExecuteCliffAndFlowCall__Outputs {
  _call: ExecuteCliffAndFlowCall;

  constructor(call: ExecuteCliffAndFlowCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecuteEndVestingCall extends ethereum.Call {
  get inputs(): ExecuteEndVestingCall__Inputs {
    return new ExecuteEndVestingCall__Inputs(this);
  }

  get outputs(): ExecuteEndVestingCall__Outputs {
    return new ExecuteEndVestingCall__Outputs(this);
  }
}

export class ExecuteEndVestingCall__Inputs {
  _call: ExecuteEndVestingCall;

  constructor(call: ExecuteEndVestingCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ExecuteEndVestingCall__Outputs {
  _call: ExecuteEndVestingCall;

  constructor(call: ExecuteEndVestingCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateVestingScheduleCall extends ethereum.Call {
  get inputs(): UpdateVestingScheduleCall__Inputs {
    return new UpdateVestingScheduleCall__Inputs(this);
  }

  get outputs(): UpdateVestingScheduleCall__Outputs {
    return new UpdateVestingScheduleCall__Outputs(this);
  }
}

export class UpdateVestingScheduleCall__Inputs {
  _call: UpdateVestingScheduleCall;

  constructor(call: UpdateVestingScheduleCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get endDate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get ctx(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class UpdateVestingScheduleCall__Outputs {
  _call: UpdateVestingScheduleCall;

  constructor(call: UpdateVestingScheduleCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
